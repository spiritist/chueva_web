# Используем LTS-версию Node.js. Вы можете выбрать конкретную, например, node:20-alpine для меньшего размера.
# Ваша текущая версия Node.js из package.json - 19.9.0. Это не LTS. Рекомендую перейти на LTS.
# Если вы настаиваете на 19.9.0, используйте FROM node:19.9.0-alpine или FROM node:19.9.0
# Однако, для примера используем более общую LTS:
FROM node:20-alpine AS development

# Устанавливаем рабочую директорию в контейнере
WORKDIR /usr/src/app

# Копируем package.json и yarn.lock для установки зависимостей
# Это делается до копирования остального кода для лучшего кэширования Docker-слоев
COPY package.json yarn.lock ./

# Устанавливаем зависимости проекта
# --frozen-lockfile гарантирует, что будут установлены версии из yarn.lock
RUN yarn install --frozen-lockfile

# На этом этапе исходный код еще не копируется в образ,
# так как мы будем монтировать его через volume при запуске контейнера
# для обеспечения Fast Refresh (HMR).
# Если бы вы хотели, чтобы образ мог запуститься и без монтирования volumes
# (например, для CI или просто для проверки), вы бы добавили:
# COPY . .
# Но для dev-режима с volumes это не обязательно и может быть пропущено
# для экономии времени на сборке, если код часто меняется.

# Порт, на котором Next.js dev server будет работать внутри контейнера
EXPOSE 3000

# Команда по умолчанию для запуска dev-сервера Next.js
# -H 0.0.0.0 - слушать на всех доступных IP-адресах внутри контейнера
# -p 3000 - использовать порт 3000
# Убедитесь, что в вашем package.json скрипт "dev" соответствует "next dev"
CMD [ "yarn", "dev", "-H", "0.0.0.0", "-p", "3000" ]